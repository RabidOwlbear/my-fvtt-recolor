{"name":"reset all counts","permission":{"default":0,"FP1JcV4n1yqg7EF1":3},"type":"script","flags":{"furnace":{"runAsGM":true},"core":{"sourceId":"Macro.y25Z22TMSldOYvl7"}},"scope":"global","command":"let journalEntry = game.journal.entities.find(j => j.name === 'Turn Count');\nawait journalEntry.setFlag('world', 'count', 0);\nawait journalEntry.setFlag('world', 'sCount', 0);\nawait journalEntry.setFlag('world', 'tCount', 0);\nlet restCount = journalEntry.getFlag('world', 'count');\nlet curCount = journalEntry.getFlag('world','sCount');\nlet totCount = journalEntry.getFlag('world', 'tCount');\n\nlet jContent = `<h1>Turn Count</h1><br><p>Session Count: ${curCount}</p><p> Total Count: ${totCount}</p><p>Turns Since Last Rest: ${restCount}</p>`;\njournalEntry.update({'content': jContent});\nconsole.log(`sCount: ${journalEntry.getFlag('world', 'sCount')}\\ntCount: ${journalEntry.getFlag('world', 'count')}`);","author":"FP1JcV4n1yqg7EF1","img":"modules/game-icons-net/whitetransparent/backward-time.svg","actorIds":[],"_id":"1WkmpnANQ6fiVr7O"}
{"name":"show current turn count","permission":{"default":0,"FP1JcV4n1yqg7EF1":3},"type":"script","flags":{"furnace":{"runAsGM":true},"core":{"sourceId":"Macro.VnFjkDUp6frDRLyQ"}},"scope":"global","command":"let journalEntry = game.journal.entities.find(j => j.name === 'Turn Count');\nlet sc = journalEntry.data.flags.world.sCount;\nlet tc = journalEntry.data.flags.world.tCount;\nlet rc = journalEntry.data.flags.world.count;\nlet style = '';\nlet chatData = {\n\t\tuser    : game.user._id,\n\t\tspeaker : ChatMessage.getSpeaker(),\n\t\tcontent : ''\n\t};\nif (rc > 5){\n    style = '<span style =\"color: red\">';\n}else if(rc > 3){\n    style = '<span style =\"color: orange\">';\n}else {\n    style = '<span>';\n}\nchatData.content = `<h1>Turn Count</h1><br><p>Session Count: ${sc}</p><p> Total Count: ${tc}</p><p>Turns Since Last Rest: ${style}${rc}</span></p>`;\nChatMessage.create(chatData);","author":"FP1JcV4n1yqg7EF1","img":"modules/game-icons-net/whitetransparent/clockwise-rotation.svg","actorIds":[],"_id":"FlXntIdGdKZ1TTdo"}
{"name":"Advance Turn Counts (level 1)","permission":{"default":0,"FP1JcV4n1yqg7EF1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.dKrkr2k2AQ4rdSud"}},"scope":"global","command":"main();\nasync function main (){\n    \nlet journalEntry = game.journal.entities.find(j => j.name === 'Turn Count');\n\n    if(!journalEntry){\n        let journal = await JournalEntry.create({ \n      content : ``, \n      name : `Turn Count`\n    });\n       \n       journalEntry = game.journal.entities.find(j => j.name === 'Turn Count');\n       await journalEntry.setFlag('world', 'count', 0);\n       await journalEntry.setFlag('world', 'tCount', 0);\n       await journalEntry.setFlag('world', 'sCount', 0);\n        ui.notifications.notify('Journal entry \"Turn Count\" created.');\n        \n    }\n    console.log(`journal entry:${journalEntry}`);\n    \n    if (!journalEntry.data.flags.world){\n       await journalEntry.setFlag('world', 'count', 0);\n       await journalEntry.setFlag('world', 'tCount', 0);\n       await journalEntry.setFlag('world', 'sCount', 0);\n    }\n\n\n\n    console.log(journalEntry);\n    let restCount = journalEntry.getFlag('world', 'count');\n    let sc = journalEntry.getFlag('world' , 'sCount');\n    let tc = journalEntry.getFlag('world', 'tCount');\n    console.log(`tCount:${tc}`);\n    console.log(`sc initial:${sc}\\ntc initial:${tc}`);\n    restCount ++;\n    sc ++;\n    tc ++;\n    console.log(`sc post: ${sc}\\ntc post:${tc}`);\n\nawait journalEntry.setFlag('world', 'sCount', sc);\nawait journalEntry.setFlag('world', 'tCount', tc);\nawait journalEntry.setFlag('world', 'count', restCount);\nconsole.log(`final sCount:${journalEntry.getFlag('world','sCount')}\\n final tCount: ${journalEntry.getFlag('world', 'tCount')}`);\n\nlet curCount = journalEntry.getFlag('world','sCount');\nlet totCount = journalEntry.getFlag('world', 'tCount');\n\nlet jContent = `<h1>Turn Count</h1><br><p>Session Count: ${curCount}</p><p> Total Count: ${totCount}</p>`;\nawait journalEntry.update({'content': jContent});\n\n//roll\nlet rollFunc = async function(){\n    let theRoll = new Roll(\"1d6\").roll();\n    console.log(theRoll);\n    let rollTarget = 1;\n    // if (totCount >= 30) rollTarget = 2;\n    if(theRoll._total > rollTarget){\n\n    theRoll.toMessage({\n    flavor: \"<span style='color: green'>No Monsters!</span>\",\n    whisper: game.users.entities.filter(u => (u.data.role)== 4).map(u => u._id)\n\n    });\n\n    }else{\n    console.log(theRoll);\n    console.log(`theRoll._result: ${theRoll._total}`);\n    await theRoll.toMessage({\n    flavor: `<span style='color: red'>${tableFlavor()}</span>`,\n    whisper: game.users.entities.filter(u => (u.data.role)== 4).map(u => u._id)\n    });\n    tableFunc();\n    reactFunc();\n    \n}\n}\n//table \n\n\nlet tableFunc = ()=>{\n    const table = game.tables.entities.find(t => t.name === \"Random Happenings Level 1\");\n    let roll = table.roll();\n    let chatData = {\n    user: game.user._id,\n    speaker: ChatMessage.getSpeaker(),\n    content: roll.results[0].text,\n    whisper: game.users.entities.filter(u => (u.data.role)== 4).map(u => u._id)\n    };\n    ChatMessage.create(chatData);\n};\nlet reactFunc = ()=>{\n    const reactTable = game.tables.entities.find(t => t.name === \"Monster Reaction Roll\");\n    let reactRoll = reactTable.roll();\n    let tableData = {\n    user: game.user._id,\n    speaker: ChatMessage.getSpeaker(),\n    content: reactRoll.results[0].text,\n    whisper: game.users.entities.filter(u => (u.data.role)== 4).map(u => u._id)\n    };\n    ChatMessage.create(tableData);\n};\n//write to journal\nlet updateJournal = ()=>{\n    let msg = '';\n    let chatData = {\n\t\tuser    : game.user._id,\n\t\tspeaker : ChatMessage.getSpeaker(),\n\t\tcontent : ''\n\t};\n    if (restCount > 5){\n        let jContent = `<h1>Turn Count</h1><br><p>Session Count: ${sc}</p><p> Total Count: ${tc}</p><p>Turns Since Last Rest: <span style=\"color: red\">${restCount}</span></p>`;\n        journalEntry.update({'content': jContent});\n        chatData.content = '<p style=\"color: red\">You Must Rest!</p>';\n        ChatMessage.create(chatData);\n    }else if (restCount > 3){\n        let jContent = `<h1>Turn Count</h1><br><p>Session Count: ${sc}</p><p> Total Count: ${tc}</p><p>Turns Since Last Rest: <span style=\"color: orangered\">${restCount}</span></p>`;\n        journalEntry.update({'content': jContent});\n        chatData.content = '<p style=\"color: orangered\">You Must Rest Soon!</p>';\n\t    ChatMessage.create(chatData);\n\n    }else {\n        let jContent = `<h1>Turn Count</h1><br><p>Session Count: ${sc}</p><p> Total Count: ${tc}</p><p>Turns Since Last Rest: ${restCount}</p>`;\n        journalEntry.update({'content': jContent});\n    }\n};\n//random text generator\nlet tableFlavor = ()=>{\n    let flavorArr = [\n        '<span style=\"color: DeepPink\">What is THIS!!!</span>',\n        '<span style=\"color: DeepPink\">What is that I hear?</span>',\n        '<span style=\"color: DeepPink\">Something is Coming!</span>',\n        '<span style=\"color: DeepPink\">What was THAT!?!</span>',\n        '<span style=\"color: DeepPink\">LISTEN! Do you smell something?!?</span>'\n        ];\n    let index = Math.floor(Math.random() * flavorArr.length);\n    console.log(index);\n    console.log(flavorArr[index]);\n    return flavorArr[index];\n    \n}\n//function calls\nawait rollFunc();\nupdateJournal();\n\n}","author":"FP1JcV4n1yqg7EF1","img":"modules/game-icons-net/whitetransparent/play-button.svg","actorIds":[],"_id":"PVyO2PDo0LKqNP07"}
{"name":"Advance Turn Counts (level 2)","permission":{"default":0,"FP1JcV4n1yqg7EF1":3},"type":"script","flags":{"furnace":{"runAsGM":true},"core":{"sourceId":"Macro.N0nTznCx9N0yiUsb"}},"scope":"global","command":"main();\nasync function main (){\n    \nlet journalEntry = game.journal.entities.find(j => j.name === 'Turn Count');\n\n    if(!journalEntry){\n        let journal = await JournalEntry.create({ \n      content : ``, \n      name : `Turn Count`\n    });\n       \n       journalEntry = game.journal.entities.find(j => j.name === 'Turn Count');\n       await journalEntry.setFlag('world', 'count', 0);\n       await journalEntry.setFlag('world', 'tCount', 0);\n       await journalEntry.setFlag('world', 'sCount', 0);\n        ui.notifications.notify('Journal entry \"Turn Count\" created.')\n        \n    }\n    console.log(journalEntry);\n    \n    if (!journalEntry.data.flags.world){\n       await journalEntry.setFlag('world', 'count', 0);\n       await journalEntry.setFlag('world', 'tCount', 0);\n       await journalEntry.setFlag('world', 'sCount', 0);\n    }\n\n\n    console.log(journalEntry)\n    let restCount = journalEntry.getFlag('world', 'count');\n    let sc = journalEntry.getFlag('world' , 'sCount');\n    let tc = journalEntry.getFlag('world', 'tCount');\n    console.log(`tCount:${tc}`);\n    console.log(`sc initial:${sc}\\ntc initial:${tc}`)\n    restCount ++;\n    sc ++;\n    tc ++;\n    console.log(`sc post: ${sc}\\ntc post:${tc}`);\n\nawait journalEntry.setFlag('world', 'sCount', sc);\nawait journalEntry.setFlag('world', 'tCount', tc);\nawait journalEntry.setFlag('world', 'count', restCount);\nconsole.log(`final sCount:${journalEntry.getFlag('world','sCount')}\\n final tCount: ${journalEntry.getFlag('world', 'tCount')}`);\n\nlet curCount = journalEntry.getFlag('world','sCount');\nlet totCount = journalEntry.getFlag('world', 'tCount');\n\nlet jContent = `<h1>Turn Count</h1><br><p>Session Count: ${curCount}</p><p> Total Count: ${totCount}</p>`;\nawait journalEntry.update({'content': jContent});\n\n//roll\nlet rollFunc = async function(){\n    let theRoll = new Roll(\"1d6\").roll();\n    console.log(theRoll);\n    let rollTarget = 1;\n    // if (totCount >= 30) rollTarget = 2;\n    if(theRoll._total > rollTarget){\n\n    theRoll.toMessage({\n    flavor: \"<span style='color: green'>No Monsters!</span>\",\n    whisper: game.users.entities.filter(u => (u.data.role)== 4).map(u => u._id)\n\n    });\n\n    }else{\n    console.log(theRoll);\n    console.log(`theRoll._result: ${theRoll._total}`);\n    await theRoll.toMessage({\n    flavor: `<span style='color: red'>${tableFlavor()}</span>`,\n    whisper: game.users.entities.filter(u => (u.data.role)== 4).map(u => u._id)\n    });\n    tableFunc();\n    reactFunc();\n    \n}\n}\n//table \n\n\nlet tableFunc = ()=>{\n    const table = game.tables.entities.find(t => t.name === \"Random Happenings Level 2\");\n    let roll = table.roll();\n    let chatData = {\n    user: game.user._id,\n    speaker: ChatMessage.getSpeaker(),\n    content: roll.results[0].text,\n    whisper: game.users.entities.filter(u => (u.data.role)== 4).map(u => u._id)\n    };\n    ChatMessage.create(chatData);\n};\nlet reactFunc = ()=>{\n    const reactTable = game.tables.entities.find(t => t.name === \"Monster Reaction Roll\");\n    let reactRoll = reactTable.roll();\n    let tableData = {\n    user: game.user._id,\n    speaker: ChatMessage.getSpeaker(),\n    content: reactRoll.results[0].text,\n    whisper: game.users.entities.filter(u => (u.data.role)== 4).map(u => u._id)\n    };\n    ChatMessage.create(tableData);\n};\n//write to journal\nlet updateJournal = ()=>{\n    let msg = '';\n    let chatData = {\n\t\tuser    : game.user._id,\n\t\tspeaker : ChatMessage.getSpeaker(),\n\t\tcontent : ''\n\t};\n    if (restCount > 5){\n        let jContent = `<h1>Turn Count</h1><br><p>Session Count: ${sc}</p><p> Total Count: ${tc}</p><p>Turns Since Last Rest: <span style=\"color: red\">${restCount}</span></p>`;\n        journalEntry.update({'content': jContent});\n        chatData.content = '<p style=\"color: red\">You Must Rest!</p>';\n        ChatMessage.create(chatData);\n    }else if (restCount > 3){\n        let jContent = `<h1>Turn Count</h1><br><p>Session Count: ${sc}</p><p> Total Count: ${tc}</p><p>Turns Since Last Rest: <span style=\"color: orangered\">${restCount}</span></p>`;\n        journalEntry.update({'content': jContent});\n        chatData.content = '<p style=\"color: orangered\">You Must Rest Soon!</p>';\n\t    ChatMessage.create(chatData);\n\n    }else {\n        let jContent = `<h1>Turn Count</h1><br><p>Session Count: ${sc}</p><p> Total Count: ${tc}</p><p>Turns Since Last Rest: ${restCount}</p>`;\n        journalEntry.update({'content': jContent});\n    }\n};\n//random text generator\nlet tableFlavor = ()=>{\n    let flavorArr = [\n        '<span style=\"color: DeepPink\">What is THIS!!!</span>',\n        '<span style=\"color: DeepPink\">What is that I hear?</span>',\n        '<span style=\"color: DeepPink\">Something is Coming!</span>',\n        '<span style=\"color: DeepPink\">What was THAT!?!</span>',\n        '<span style=\"color: DeepPink\">LISTEN! Do you smell something?!?</span>'\n        ];\n    let index = Math.floor(Math.random() * flavorArr.length);\n    console.log(index);\n    console.log(flavorArr[index]);\n    return flavorArr[index];\n    \n}\n//function calls\nawait rollFunc();\nupdateJournal();\n\n}","author":"FP1JcV4n1yqg7EF1","img":"modules/game-icons-net/whitetransparent/play-button.svg","actorIds":[],"_id":"SWKrSjInLI1U7HRf"}
{"name":"Rest","permission":{"default":0,"FP1JcV4n1yqg7EF1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.dkYVSN6WrmYrQKpQ"}},"scope":"global","command":"let journalEntry = game.journal.entities.find(j => j.name === 'Turn Count');\nawait journalEntry.setFlag('world', 'count', 0);\nlet jContent = `<h1>Turn Count</h1><br><p>Session Count: ${journalEntry.data.flags.world.sCount}</p><p> Total Count: ${journalEntry.data.flags.world.tCount}</p><p>Turns Since Last Rest: ${journalEntry.data.flags.world.count}</p>`;\njournalEntry.update({'content': jContent});\nlet chatData = {\n    user: game.user.id,\n    speaker: ChatMessage.getSpeaker(),\n    content: '<span style=\"color: green\">Resting</span>',\n    // whisper: game.users.entities.filter(u => (u.data.role)== 4).map(u => u._id)\n};\nChatMessage.create(chatData);","author":"FP1JcV4n1yqg7EF1","img":"modules/game-icons-net/whitetransparent/camping-tent.svg","actorIds":[],"_id":"fAnEiHIZRURCWIl5"}
{"name":"reset session count","permission":{"default":0,"FP1JcV4n1yqg7EF1":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.42EMvRInYyQ40def"}},"scope":"global","command":"let journalEntry = game.journal.entities.find(j => j.name === 'Turn Count');\nawait journalEntry.setFlag('world', 'sCount', 0);\nconsole.log(journalEntry);\nlet curCount = journalEntry.getFlag('world','sCount');\nlet totCount = journalEntry.getFlag('world', 'tCount');\nconsole.log(curCount);\nlet jContent = `<h1>Turn Count</h1><br><p>Session Count: ${curCount}</p><p> Total Count: ${totCount}</p>`;\njournalEntry.update({'content': jContent});","author":"FP1JcV4n1yqg7EF1","img":"modules/game-icons-net/whitetransparent/backward-time.svg","actorIds":[],"_id":"g8uiYOQLghU1e9qc"}
